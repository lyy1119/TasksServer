openapi: 3.0.3
info:
  title: TasksServer API
  version: 1.0.0
  description: >
    API for managing users and tasks.
    Provides basic CRUD operations for both entities.

servers:
  - url: http://localhost:8080
    description: Local development server
  - url: https://api.example.com
    description: Production server

paths:
  /healthz:
    get:
      summary: Health check
      description: Simple liveness check. Returns 200 if service and DB are alive.
      responses:
        '200':
          description: Service is alive
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  time:
                    type: string
                    format: date-time
        '503':
          description: Service is not ready
  /users:
    get:
      summary: Get all users
      tags: [Users]
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

    post:
      summary: Create a new user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created

  /users/{id}:
    get:
      summary: Get a single user by ID
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

    put:
      summary: Update a user
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated
        '404':
          description: User not found

    delete:
      summary: Delete a user
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User deleted
        '404':
          description: User not found

  /tasks:
    get:
      summary: Get all tasks
      tags: [Tasks]
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'

    post:
      summary: Create a new task
      tags: [Tasks]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreate'
      responses:
        '201':
          description: Task created

  /tasks/{id}:
    get:
      summary: Get a task by ID
      tags: [Tasks]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found

    put:
      summary: Update a task
      tags: [Tasks]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdate'
      responses:
        '200':
          description: Task updated
        '404':
          description: Task not found

    delete:
      summary: Delete a task
      tags: [Tasks]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Task deleted
        '404':
          description: Task not found

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: alice
        email:
          type: string
          format: email
          example: alice@example.com

    UserCreate:
      type: object
      required: [username, email]
      properties:
        username:
          type: string
        email:
          type: string
          format: email

    UserUpdate:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email

    Task:
      type: object
      properties:
        id:
          type: integer
          example: 101
          format: int64
        title:
          type: string
          example: Finish homework
        description:
          type: string
          example: Math and physics assignments
        completed:
          type: boolean
          example: false
        userId:
          type: integer
          example: 1

    TaskCreate:
      type: object
      required: [title]
      properties:
        title:
          type: string
        description:
          type: string
        userId:
          type: integer

    TaskUpdate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        completed:
          type: boolean
